import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Stack;

/**
 * –ö–ª–∞—Å—Å ExpressionEvaluator –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —á–∏—Å–ª–∞, –±–∞–∑–æ–≤—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —Å–∫–æ–±–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
 */
public class ExpressionEvaluator {

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
     *
     * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è).
     */
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:");
        String expression = scanner.nextLine();

        try {
            double result = evaluateExpression(expression);
            System.out.println("– –µ–∑—É–ª—å—Ç–∞—Ç: " + result);
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.
     *
     * @param expression –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
     * @return – –µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
     * @throws Exception –ï—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
     */
    public static double evaluateExpression(String expression) throws Exception {
        Map<String, Double> variables = new HashMap<>();
        Stack<String> variableStack = new Stack<>();
        Stack<Character> operatorStack = new Stack<>();
        Stack<Double> valueStack = new Stack<>();

        int i = 0;
        while (i < expression.length()) {
            char c = expression.charAt(i);

            if (Character.isWhitespace(c)) {
                i++;
                continue;
            }

            if (Character.isLetter(c)) {
                StringBuilder variable = new StringBuilder();
                while (i < expression.length() && (Character.isLetterOrDigit(expression.charAt(i)) || expression.charAt(i) == '_')) {
                    variable.append(expression.charAt(i));
                    i++;
                }
                String varName = variable.toString();
                if (!variables.containsKey(varName)) {
                    Scanner scanner = new Scanner(System.in);
                    System.out.println("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è " + varName + ":");
                    variables.put(varName, scanner.nextDouble());
                }
                variableStack.push(varName);
            } else if (Character.isDigit(c) || c == '.') {
                StringBuilder number = new StringBuilder();
                while (i < expression.length() && (Character.isDigit(expression.charAt(i)) || expression.charAt(i) == '.')) {
                    number.append(expression.charAt(i));
                    i++;
                }
                valueStack.push(Double.parseDouble(number.toString()));
                i--;
            } else if (c == '(') {
                operatorStack.push(c);
            } else if (c == ')') {
                while (operatorStack.peek() != '(') {
                    valueStack.push(applyOperator(operatorStack.pop(), valueStack.pop(), valueStack.pop()));
                }
                operatorStack.pop();
            } else if (isOperator(c)) {
                while (!operatorStack.isEmpty() && precedence(c) <= precedence(operatorStack.peek())) {
                    valueStack.push(applyOperator(operatorStack.pop(), valueStack.pop(), valueStack.pop()));
                }
                operatorStack.push(c);
            } else {
                throw new Exception("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: " + c);
            }
            i++;
        }

        while (!operatorStack.isEmpty()) {
            valueStack.push(applyOperator(operatorStack.pop(), valueStack.pop(), valueStack.pop()));
        }

        return valueStack.pop();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.
     *
     * @param c –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
     * @return True, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –∏–Ω–∞—á–µ false.
     */
    private static boolean isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/';
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
     *
     * @param op –û–ø–µ—Ä–∞—Ç–æ—Ä.
     * @return –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
     */
    private static int precedence(char op) {
        switch (op) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            default:
                return 0;
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫ –æ–ø–µ—Ä–∞–Ω–¥–∞–º.
     *
     * @param op –û–ø–µ—Ä–∞—Ç–æ—Ä.
     * @param b –í—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥.
     * @param a –ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥.
     * @return – –µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏.
     * @throws ArithmeticException –ï—Å–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å.
     * @throws IllegalArgumentException –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.
     */
    private static double applyOperator(char op, double b, double a) {
        switch (op) {
            case '+':
                return a + b;
            case '-':
                return a - b;
            case '*':
                return a * b;
            case '/':
                if (b == 0) {
                    throw new ArithmeticException("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å");
                }
                return a / b;
            default:
                throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: " + op);
        }
    }
}